// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                @id @default(cuid())
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @updatedAt
  email                         String                @unique
  passwordHash                  String
  firstName                     String
  lastName                      String
  phone                         String
  avatar                        String
  defaultTenantId               String?
  verifyToken                   String?
  admin                         AdminUser?
  tenants                       TenantUser[]
  invitation                    TenantUserInvitation?
  contracts                     ContractMember[]
  tenantRelationships           TenantRelationship[]
  createdContracts              Contract[]
  createdEmployees              Employee[]
  contractActivities            ContractActivity[]
  tenantRelationshipInvitations TenantRelationship[]  @relation("userInvited")
  activity                      UserEvent[]
}

model AdminUser {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Int
}

model UserEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  action    String
  details   String
}

model Tenant {
  id                            String                 @id @default(cuid())
  createdAt                     DateTime               @default(now())
  updatedAt                     DateTime               @updatedAt
  slug                          String                 @unique
  name                          String
  icon                          String
  subscriptionId                String?
  subscription                  TenantSubscription?
  users                         TenantUser[]
  invitations                   TenantUserInvitation[]
  employees                     Employee[]
  activity                      UserEvent[]
  createdTenantRelationships    TenantRelationship[]   @relation("createdByTenant")
  asProviderTenantRelationships TenantRelationship[]   @relation("providerTenant")
  asClientTenantRelationships   TenantRelationship[]   @relation("clientTenant")
}

model TenantSubscription {
  tenantId             String             @unique
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionPriceId  String?
  subscriptionPrice    SubscriptionPrice? @relation(fields: [subscriptionPriceId], references: [id])
  maxUsers             Int
  monthlyContracts     Int
}

model TenantUser {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     Int
  joined   Int
  status   Int
  // current  Boolean
}

model TenantUserInvitation {
  id            String  @id @default(cuid())
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email         String
  firstName     String
  lastName      String
  role          Int
  pending       Boolean
  createdUserId String? @unique
  user          User?   @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
}

// model ApiKey {
//   id              String   @id @default(cuid())
//   createdByUserId String
//   createdByUser   User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
//   tenantId        String
//   tenant          Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
// }

model SubscriptionProduct {
  id               String                @id @default(cuid())
  stripeId         String
  tier             Int
  title            String
  description      String
  badge            String
  active           Boolean
  public           Boolean
  maxUsers         Int
  monthlyContracts Int
  prices           SubscriptionPrice[]
  features         SubscriptionFeature[]
}

model SubscriptionPrice {
  id                    String               @id @default(cuid())
  subscriptionProductId String
  subscriptionProduct   SubscriptionProduct  @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  stripeId              String
  type                  Int
  billingPeriod         Int
  price                 Int
  currency              String
  trialDays             Int
  active                Boolean
  tenantSubscriptions   TenantSubscription[]
}

model SubscriptionFeature {
  id                    String              @id @default(cuid())
  subscriptionProductId String
  subscriptionProduct   SubscriptionProduct @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  order                 Int
  key                   String
  value                 String
  included              Boolean
}

model TenantRelationship {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  createdByUserId   String
  createdByUser     User       @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByTenantId String
  createdByTenant   Tenant     @relation("createdByTenant", fields: [createdByTenantId], references: [id], onDelete: Cascade)
  providerTenantId  String
  providerTenant    Tenant     @relation("providerTenant", fields: [providerTenantId], references: [id], onDelete: Cascade)
  clientTenantId    String
  clientTenant      Tenant     @relation("clientTenant", fields: [clientTenantId], references: [id], onDelete: Cascade)
  status            Int
  userInvitedId     String
  userInvited       User       @relation("userInvited", fields: [userInvitedId], references: [id], onDelete: Cascade)
  contracts         Contract[]
}

model Employee {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  createdByUserId  String
  createdByUser    User               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenantId         String
  tenant           Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  firstName        String
  lastName         String
  email            String
  ContractEmployee ContractEmployee[]
}

model Contract {
  id                   String             @id @default(cuid())
  createdAt            DateTime           @default(now())
  createdByUserId      String
  createdByUser        User               @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenantRelationshipId String
  tenantRelationship   TenantRelationship @relation(fields: [tenantRelationshipId], references: [id], onDelete: Cascade)
  name                 String
  description          String
  file                 String
  status               Int
  members              ContractMember[]
  employees            ContractEmployee[]
  activity             ContractActivity[]
}

model ContractMember {
  id         String    @id @default(cuid())
  contractId String
  contract   Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  role       Int
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  signDate   DateTime?
}

model ContractEmployee {
  id         String   @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ContractActivity {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  createdByUserId String
  createdByUser   User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  contractId      String
  contract        Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  type            Int
}
