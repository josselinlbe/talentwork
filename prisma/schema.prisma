// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                @id @default(cuid())
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  email                    String                @unique
  passwordHash             String
  firstName                String
  lastName                 String
  avatar                   String?
  phone                    String?
  defaultTenantId          String?
  verifyToken              String?
  admin                    AdminUser?
  tenants                  TenantUser[]
  invitation               TenantUserInvitation?
  logs                     Log[]
  contracts                ContractMember[]
  createdContractActivites ContractActivity[]
  createdLinkedAccounts    LinkedAccount[]
  createdRows              Row[]
  createdApiKeys           ApiKey[]
}

model AdminUser {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Int
}

model Tenant {
  id                       String                 @id @default(cuid())
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  slug                     String                 @unique
  name                     String
  icon                     String?
  subscriptionId           String?
  subscription             TenantSubscription?
  users                    TenantUser[]
  invitations              TenantUserInvitation[]
  rows                     Row[]
  logs                     Log[]
  apiKeys                  ApiKey[]
  createdLinkedAccounts    LinkedAccount[]        @relation("createdByTenant")
  asProviderLinkedAccounts LinkedAccount[]        @relation("providerTenant")
  asClientLinkedAccounts   LinkedAccount[]        @relation("clientTenant")
}

model TenantSubscription {
  tenantId             String             @unique
  tenant               Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionPriceId  String?
  subscriptionPrice    SubscriptionPrice? @relation(fields: [subscriptionPriceId], references: [id])
  quantity             Int?
}

model TenantUser {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      Int
  joined    Int
  status    Int
  roles     TenantUserRole[]
}

model TenantUserRole {
  id           String     @id @default(cuid())
  tenantUserId String
  tenantUser   TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)
  order        Int
  name         String
}

model TenantUserInvitation {
  id            String  @id @default(cuid())
  tenantId      String
  tenant        Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  email         String
  firstName     String
  lastName      String
  type          Int
  pending       Boolean
  createdUserId String? @unique
  user          User?   @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
}

model LinkedAccount {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  createdByUserId   String
  createdByUser     User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByTenantId String
  createdByTenant   Tenant   @relation("createdByTenant", fields: [createdByTenantId], references: [id], onDelete: Cascade)
  providerTenantId  String
  providerTenant    Tenant   @relation("providerTenant", fields: [providerTenantId], references: [id], onDelete: Cascade)
  clientTenantId    String
  clientTenant      Tenant   @relation("clientTenant", fields: [clientTenantId], references: [id], onDelete: Cascade)
  status            Int
  rows              Row[]
}

model ApiKey {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  createdByUserId String
  createdByUser   User           @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  tenantId        String
  tenant          Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  key             String         @default(uuid())
  alias           String
  max             Int
  expires         DateTime
  active          Boolean
  entities        ApiKeyEntity[]
  apiKeyLogs      ApiKeyLog[]
  logs            Log[]
  createdRows     Row[]

  @@unique([tenantId, alias])
}

model ApiKeyEntity {
  id       String  @id @default(cuid())
  apiKeyId String
  apiKey   ApiKey  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  entityId String
  entity   Entity  @relation(fields: [entityId], references: [id], onDelete: Cascade)
  create   Boolean
  read     Boolean
  update   Boolean
  delete   Boolean
}

model Log {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  tenantId    String?
  tenant      Tenant?            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  apiKeyId    String?
  apiKey      ApiKey?            @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  rowId       String?
  row         Row?               @relation(fields: [rowId], references: [id], onDelete: Cascade)
  url         String
  action      String
  details     String?
  webhookLogs EntityWebhookLog[]
}

model ApiKeyLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  apiKeyId  String?
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  ip        String
  endpoint  String
  method    String
  params    String
  // body      String
  status    Int?
  error     String?
}

model SubscriptionProduct {
  id          String                @id @default(cuid())
  stripeId    String
  order       Int
  title       String
  active      Boolean
  model       Int // 0 = FLAT_RATE, 1 = PER_SEAT, 2 = USAGE_BASED
  public      Boolean
  description String?
  badge       String?
  prices      SubscriptionPrice[]
  features    SubscriptionFeature[]
}

model SubscriptionPrice {
  id                    String               @id @default(cuid())
  subscriptionProductId String
  subscriptionProduct   SubscriptionProduct  @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  stripeId              String
  type                  Int // 0 = ONE_TIME, 1 = RECURRING
  billingPeriod         Int // 3 = MONTHLY, 4 = YEARLY
  price                 Int
  currency              String
  trialDays             Int
  active                Boolean
  tenantSubscriptions   TenantSubscription[]
}

model SubscriptionFeature {
  id                    String              @id @default(cuid())
  subscriptionProductId String
  subscriptionProduct   SubscriptionProduct @relation(fields: [subscriptionProductId], references: [id], onDelete: Cascade)
  order                 Int
  title                 String
  name                  String
  type                  Int // 0 = NOT_INCLUDED, 1 = INCLUDED, 2 = MONTHLY, 3 = MAX, 4 = UNLIMITED
  value                 Int
}

model BlogAuthor {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  slug      String     @unique
  firstName String
  lastName  String
  image     String
  url       String
  posts     BlogPost[]
}

model BlogCategory {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String     @unique
  color     Int
  posts     BlogPost[]
}

model BlogTag {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  name      String        @unique
  color     Int
  posts     BlogPostTag[]
}

model BlogPostTag {
  id     String   @id @default(cuid())
  postId String
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tagId  String
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  slug        String        @unique
  title       String
  description String
  date        DateTime
  image       String
  content     String
  readingTime String
  published   Boolean
  authorId    String
  author      BlogAuthor    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId  String
  category    BlogCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags        BlogPostTag[]
}

model Entity {
  id                     String                       @id @default(cuid())
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  name                   String                       @unique
  slug                   String                       @unique
  order                  Int                          @unique
  prefix                 String                       @unique
  title                  String // i18n key, eg: models.contract.object
  titlePlural            String //  i18n key, eg: models.contract.plural
  isFeature              Boolean
  isAutogenerated        Boolean
  hasApi                 Boolean
  requiresLinkedAccounts Boolean
  icon                   String
  active                 Boolean
  properties             Property[]
  rows                   Row[]
  permissions            EntityTenantUserPermission[]
  apiKeys                ApiKeyEntity[]
  webhooks               EntityWebhook[]
}

model Property {
  id         String           @id @default(cuid())
  entityId   String
  entity     Entity           @relation(fields: [entityId], references: [id], onDelete: Cascade)
  order      Int
  name       String
  title      String
  type       Int
  formula    String?
  parentId   String?
  parent     Property?        @relation(name: "parentProperty", fields: [parentId], references: [id], onDelete: Cascade)
  isDynamic  Boolean
  isDefault  Boolean
  isRequired Boolean
  isHidden   Boolean
  isDetail   Boolean
  pattern    String?
  options    PropertyOption[]
  children   Property[]       @relation(name: "parentProperty")
  values     RowValue[]

  @@unique([entityId, order])
  @@unique([entityId, name])
  @@unique([entityId, title])
}

model PropertyOption {
  id         String           @id @default(cuid())
  propertyId String
  property   Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     PropertyOption?  @relation(name: "parentOption", fields: [parentId], references: [id], onDelete: Cascade)
  order      Int
  value      String
  options    PropertyOption[] @relation(name: "parentOption")
}

model Row {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  entityId          String
  entity            Entity         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  tenantId          String
  tenant            Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  folio             Int
  createdByUserId   String?
  createdByUser     User?          @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  createdByApiKeyId String?
  createdByApiKey   ApiKey?        @relation(fields: [createdByApiKeyId], references: [id], onDelete: Cascade)
  linkedAccountId   String?
  linkedAccount     LinkedAccount? @relation(fields: [linkedAccountId], references: [id], onDelete: Cascade)
  contractId        String?
  contract          Contract?
  employeeId        String?
  employee          Employee?
  logs              Log[]
  values            RowValue[]
  relatedRows       RowValue[]     @relation(name: "relatedRow")

  parentRowId String?
  parentRow   Row?    @relation(name: "parentRowId", fields: [parentRowId], references: [id], onDelete: Cascade)
  details     Row[]   @relation(name: "parentRowId")
}

model RowValue {
  id           String    @id @default(cuid())
  rowId        String
  row          Row       @relation(fields: [rowId], references: [id], onDelete: Cascade)
  propertyId   String
  property     Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  relatedRowId String?
  relatedRow   Row?      @relation(name: "relatedRow", fields: [relatedRowId], references: [id], onDelete: Cascade)
  idValue      String?
  textValue    String?
  numberValue  Decimal?
  dateValue    DateTime?
  media        Media[]
}

model Media {
  id         String   @id @default(cuid())
  rowValueId String
  rowValue   RowValue @relation(fields: [rowValueId], references: [id], onDelete: Cascade)
  title      String
  name       String
  file       String
  type       String
}

model EntityTenantUserPermission {
  id       String @id @default(cuid())
  entityId String
  entity   Entity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  level    Int // 0 = Read, 1 = +Create, 2 = +Update, 3 = Delete
}

model EntityWebhook {
  id       String             @id @default(cuid())
  entityId String
  entity   Entity             @relation(fields: [entityId], references: [id], onDelete: Cascade)
  action   String
  method   String
  endpoint String
  logs     EntityWebhookLog[]
}

model EntityWebhookLog {
  id        String        @id @default(cuid())
  webhookId String
  webhook   EntityWebhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  logId     String
  log       Log           @relation(fields: [logId], references: [id], onDelete: Cascade)
  status    Int
  error     String?
}

// model EntityLog {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   logId     String
//   log       Log      @relation(fields: [logId], references: [id], onDelete: Cascade)
//   url       String
//   action    String
//   details   String
// }

model Employee {
  id               String             @id @default(cuid())
  rowId            String             @unique
  row              Row                @relation(fields: [rowId], references: [id], onDelete: Cascade)
  firstName        String
  lastName         String
  email            String
  ContractEmployee ContractEmployee[]
}

model Contract {
  id          String             @id @default(cuid())
  rowId       String             @unique
  row         Row                @relation(fields: [rowId], references: [id], onDelete: Cascade)
  name        String
  description String
  file        String
  status      Int
  members     ContractMember[]
  employees   ContractEmployee[]
  activity    ContractActivity[]
}

model ContractMember {
  id         String    @id @default(cuid())
  contractId String
  contract   Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)
  role       Int
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  signDate   DateTime?
}

model ContractEmployee {
  id         String   @id @default(cuid())
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model ContractActivity {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  createdByUserId String
  createdByUser   User     @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
  contractId      String
  contract        Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  type            Int
}
