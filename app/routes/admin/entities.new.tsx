import { EntityPropertyOption } from "@prisma/client";
import { useTranslation } from "react-i18next";
import { ActionFunction, json, redirect } from "remix";
import EntityForm from "~/components/entities/EntityForm";
import NewPageLayout from "~/components/ui/layouts/NewPageLayout";
import { i18nHelper } from "~/locale/i18n.utils";
import { createEntity } from "~/utils/db/entities.db.server";
import EntityHelper from "~/utils/helpers/EntityHelper";

type ActionData = {
  error?: string;
};
const badRequest = (data: ActionData) => json(data, { status: 400 });
export const action: ActionFunction = async ({ request }) => {
  const { t } = await i18nHelper(request);
  const form = await request.formData();
  const action = form.get("action")?.toString() ?? "";
  if (action === "create") {
    const name = form.get("name")?.toString() ?? "";
    const slug = form.get("slug")?.toString() ?? "";
    const order = Number(form.get("order"));
    const prefix = form.get("prefix")?.toString() ?? "";
    const title = form.get("title")?.toString() ?? "";
    const titlePlural = form.get("title-plural")?.toString() ?? "";
    const isFeature = Boolean(form.get("is-feature"));
    const isAutogenerated = Boolean(form.get("is-autogenerated"));
    const hasApi = Boolean(form.get("has-api"));
    const requiresLinkedAccounts = Boolean(form.get("requires-account-link"));
    const icon = form.get("icon")?.toString() ?? "";
    const active = Boolean(form.get("active"));

    const errors = await EntityHelper.validateEntity(name, slug, order, prefix);
    if (errors.length > 0) {
      return badRequest({ error: errors.join(", ") });
    }
    try {
      const entity = await createEntity({
        name,
        slug,
        order,
        prefix,
        title,
        titlePlural,
        isFeature,
        isAutogenerated,
        hasApi,
        requiresLinkedAccounts,
        icon,
        active,
      });

      if (entity) {
        return redirect(`/admin/entities/${slug}/properties`);
      } else {
        return badRequest({ error: "Could not create entity" });
      }
    } catch (e) {
      return badRequest({ error: JSON.stringify(e) });
    }
  } else {
    return badRequest({ error: t("shared.invalidForm") });
  }
};

export default function NewBlog() {
  const { t } = useTranslation();
  return (
    <NewPageLayout
      title={`${t("shared.new")} ${t("models.entity.object")}`}
      menu={[
        { title: t("models.entity.plural"), routePath: "/admin/entities" },
        { title: t("shared.new"), routePath: "/admin/entities/new" },
      ]}
    >
      <EntityForm />
    </NewPageLayout>
  );
}
