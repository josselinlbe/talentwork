import { redirect } from "@remix-run/node";
import { PlanFeatureUsageDto } from "~/application/dtos/subscriptions/PlanFeatureUsageDto";
import { i18nHelper } from "~/locale/i18n.utils";
import { EntityWithDetails, getEntityBySlug } from "~/utils/db/entities/entities.db.server";
import { RowWithDetails } from "~/utils/db/entities/rows.db.server";
import { LinkedAccountWithDetailsAndMembers, getLinksWithMembers } from "~/utils/db/linkedAccounts.db.server";
import { verifyUserHasPermission, getEntityPermission } from "~/utils/helpers/PermissionsHelper";
import { getRelatedRows } from "~/utils/services/entitiesService";
import { getPlanFeatureUsage } from "~/utils/services/subscriptionService";
import { Params } from "react-router";
import UrlUtils from "~/utils/app/UrlUtils";

export type LoaderDataRowNew = {
  title: string;
  entity: EntityWithDetails;
  relatedEntities: { propertyId: string; entity: EntityWithDetails; rows: RowWithDetails[] }[];
  featureUsageEntity: PlanFeatureUsageDto | undefined;
  linkedAccounts: LinkedAccountWithDetailsAndMembers[];
  entityRowsRoute: string;
};

interface LoaderRowNewParams {
  request: Request;
  params: Params;
  tenantId: string | null;
  entitySlug: string;
  entityRowsRoute: string;
  validateIsAutogenerated?: boolean;
}
export let loaderRowNew = async ({ request, params, tenantId, entitySlug, entityRowsRoute, validateIsAutogenerated }: LoaderRowNewParams) => {
  let { t } = await i18nHelper(request);

  const entity = await getEntityBySlug(entitySlug);
  if (!entity) {
    throw redirect(entityRowsRoute);
  }
  if (validateIsAutogenerated && !entity.isAutogenerated) {
    throw redirect(tenantId ? UrlUtils.currentTenantUrl(params, "404") : "/404");
  }
  await verifyUserHasPermission(request, getEntityPermission(entity, "create"), tenantId);

  const relatedEntities = await getRelatedRows(entity.properties, tenantId);
  const featureUsageEntity = tenantId ? await getPlanFeatureUsage(tenantId, entity.name) : undefined;
  const linkedAccounts = await getLinksWithMembers(tenantId);
  const data: LoaderDataRowNew = {
    title: `${t(entity.title)} | ${process.env.APP_NAME}`,
    entity,
    relatedEntities,
    featureUsageEntity,
    linkedAccounts,
    entityRowsRoute,
  };
  return data;
};
