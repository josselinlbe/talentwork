import { EntityTag, EntityWorkflowState } from "@prisma/client";
import { Params } from "react-router";
import { redirect } from "@remix-run/node";
import Constants from "~/application/Constants";
import { PaginationDto } from "~/application/dtos/data/PaginationDto";
import { i18nHelper } from "~/locale/i18n.utils";
import { EntityWithDetails, getEntityBySlug } from "~/utils/db/entities/entities.db.server";
import { getEntityTags } from "~/utils/db/entities/entityTags.db.server";
import { RowWithDetails } from "~/utils/db/entities/rows.db.server";
import { verifyUserHasPermission, getEntityPermission } from "~/utils/helpers/PermissionsHelper";
import { getEntityFiltersFromCurrentUrl, getPaginationFromCurrentUrl, getRowsWithPagination } from "~/utils/helpers/RowPaginationHelper";
import { getUserInfo } from "~/utils/session.server";
import { getWorkflowStates } from "~/utils/db/workflows/workflowStates.db.server";
import { EntityViewWithDetails, getEntityViews } from "~/utils/db/entities/entityViews.db.server";
import EntityViewHelper from "~/utils/helpers/EntityViewHelper";
import UrlUtils from "~/utils/app/UrlUtils";

export type LoaderDataRowsView = {
  title: string;
  entity: EntityWithDetails;
  items: RowWithDetails[];
  tags: EntityTag[];
  pagination?: PaginationDto;
  workflowStates: EntityWorkflowState[];
  views: EntityViewWithDetails[];
  currentView: EntityViewWithDetails | null;
};

interface LoaderDataRowsViewParams {
  request: Request;
  params: Params;
  tenantId: string | null;
  entitySlug: string;
  validateIsAutogenerated?: boolean;
}
export let loaderRowsView = async ({ request, params, tenantId, entitySlug, validateIsAutogenerated }: LoaderDataRowsViewParams) => {
  let { t } = await i18nHelper(request);
  const userInfo = await getUserInfo(request);
  let entity = await getEntityBySlug(entitySlug ?? params.entity ?? "");
  if (!entity || (validateIsAutogenerated && !entity.isAutogenerated)) {
    throw redirect(tenantId ? UrlUtils.currentTenantUrl(params, "404") : "/404");
  }
  await verifyUserHasPermission(request, getEntityPermission(entity, "view"), tenantId);

  const views = await getEntityViews(entity.id);
  const currentView = await EntityViewHelper.getCurrentEntityView(entity.id, request);

  const currentPagination = getPaginationFromCurrentUrl(request, entity, currentView);
  const filters = getEntityFiltersFromCurrentUrl(true, entity, request, currentView);
  let pageSize = Constants.DEFAULT_PAGE_SIZE;
  if (currentView?.layout === "table" && currentView?.pageSize > 0) {
    pageSize = currentView.pageSize;
  }
  const { items, pagination } = await getRowsWithPagination(
    entity.id,
    tenantId,
    userInfo.userId,
    pageSize,
    currentPagination.page,
    currentPagination.sortedBy,
    filters
  );

  const data: LoaderDataRowsView = {
    title: `${t(entity.titlePlural)} | ${process.env.APP_NAME}`,
    entity,
    items,
    pagination,
    tags: await getEntityTags(entity.id),
    workflowStates: await getWorkflowStates(entity.id),
    views,
    currentView,
  };
  return data;
};
